
import PySimpleGUI as sg
import cv2
import matplotlib
matplotlib.use('TKAgg')
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import measureLight as SLA # Smart Light Analyzer
import datetime
import psutil
import os
from csv import writer
import numpy as np
from vimba import *

# Pack the Graphs from MatPlotLib to TKinter
def pack_figure(graph, figure):
    canvas = FigureCanvasTkAgg(figure, graph.Widget)
    plot_widget = canvas.get_tk_widget()
    plot_widget.pack(side='top', fill='both', expand=1)
    return plot_widget

# Cleans and Plots the Graphs
def plot_figure(index, x, y):
    fig = plt.figure(index)         # Select Graph to Change
    ax = plt.gca()                  # Get the current graph
    ax.cla()                        # Clear the current graph
    if index == 1:                     
        ax.set_title("Horizontal Profile")  # Set Titles for Graphs
    else:
        ax.set_title("Vertical Profile")
    plt.plot(x, y)                  # Plot y versus x as lines and/or markers
    fig.canvas.draw()               # Re-Draws Graph 

def append_list_as_row(file_name, list_of_elem):
    # Open file in append mode
    with open(file_name, 'a+', newline='') as write_obj:
        # Create a writer object from csv module
        csv_writer = writer(write_obj)
        # Add contents of list as last row in the csv file
        csv_writer.writerow(list_of_elem)

fig1 = plt.figure(1)                # Create a new figure
ax1 = plt.subplot(111)              # Add a subplot to the current figure
fig2 = plt.figure(2)                # Create a new figure
ax2 = plt.subplot(111)              # Add a subplot to the current figure

sg.theme("SmartVision")

SVLIcon = b'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'

SVLStack = b''

buttons = [
    [sg.Button("Exit", size=(10, 1))],
    [sg.Button("JWL", size =(10, 1))],
    [sg.Button("LSR", size =(10, 1))]
]

lights = [
    'LSR',
    'JWL'
]

linear_size = [
    '150',
    '300',
    '450',
    '600'
]

lens_config = [
    'S',
    'N',
    'W'
]

other_size = [
    '150',
    '225'
]

colors = [
    'WHI',
    '625',
    '470'
]

lists = [
    [sg.Combo(lights, default_value='LSR', key="-LIGHT-", enable_events=True),
        sg.Combo(lens_config, default_value='S', key="-LENS-", enable_events=True)],
    [sg.Combo(linear_size, default_value='300', key="-SIZE-", enable_events=True)],
    [sg.Combo(colors, default_value='WHI', key="-COLORS-")]
]

image_column = [
    [sg.Text("EOL Tester", size=(30, 1), text_color="#134A8F", justification="center", font=["Kanit",48,"bold"], expand_x= True)],
    [sg.Image(filename="", key="-IMAGE-", size=(100, 100), expand_x=True, expand_y=True, background_color="#ffffff")],
    [sg.Text("Light P/N:", font=["Open Sans",15,""]), sg.InputText(enable_events=True, size=(20, 5), font=["",15,""], key="-LIGHT_STRING-", do_not_clear=True)],
    [sg.Text("Light S/N:", font=["Open Sans",15,""]), sg.InputText(enable_events=True, size=(20, 5), font=["",15,""], key="-SERIAL_NUM-", do_not_clear=True)],
    [sg.Button("Measure", size=(10,2), font=["Open Sans",20,"bold"], key="-MEASURE-")]
]

graph_column = [
    [sg.Text("Graph Analysis", font=["Kanit",32,"bold"], size=(10, 1), justification="center", expand_x= True),
        sg.Button("Report", size=(10,1), font=["Open Sans",10,"bold"], key="-SHWRPRT-")],
    [sg.Graph((200, 100), (0, 0), (200, 100), key="Graph1", expand_x=True)],
    [sg.Graph((200, 100), (0, 0), (200, 100), key="Graph2", expand_x=True)]
]

#    [sg.Graph((200, 100), (0, 0), (200, 100), key="Graph1", expand_x=True)],
#    [sg.Graph((200, 100), (0, 0), (200, 100), key="Graph2", expand_x=True)]

report_column = [
    [sg.Text("Measurements", font=["Kanit",32,"bold"], size=(10, 1), justification="center", expand_x= True),
         sg.Button("Graphs", size=(10,1), font=["Open Sans",10,"bold"], key="-SHWGRPH-")],
    [sg.Text("Test Station #1", font=["Kanit",20,"bold"], size=(10, 1), justification="left", expand_x= True),
        sg.Text("Time Measured:", font=["Kanit",15,"bold"], size=(10, 1), justification="right", expand_x= True, key="-TIME-", border_width=1)],
    [sg.HorizontalSeparator()],
    [sg.Text("JWL150-MD-WHI\nSVL261609", font=["Kanit",15,"bold"], size=(13, 2), justification="left", expand_x=True, key="-PNSN-"),
        sg.Text("Status:", font=["Open Sans",15,"bold"], size=(7, 1), justification="right"),
        sg.Text("FAIL", text_color="red", font=["Open Sans",20,"bold"], size=(4, 1), justification="center", relief="solid", border_width=1, key="-STATUS-")],
    [sg.Text("Total Flux:", font=["Open Sans",15,"bold"], size=(17, 1), justification="right", expand_x=True),
        sg.Text("Flux", font=["Open Sans",15,""], size=(10, 1), justification="center", expand_x= True, key="-FLXMZRD-"),
        sg.Text("999999±999", font=["Open Sans",15,""], size=(15, 1), justification="center", expand_x= True, key="-FLXHL-"),
        sg.Text("PASS", font=["Open Sans",15,"bold"], size=(10, 1), justification="Left", text_color="green", expand_x= True, key="-FLXPF-")],
    [sg.Text("Center Lux:", font=["Open Sans",15,"bold"], size=(17, 1), justification="right", expand_x= True),
        sg.Text("Lux", font=["Open Sans",15,""], size=(10, 1), justification="center", expand_x= True, key="-LXMZRD-"),
        sg.Text("999999±999", font=["Open Sans",15,""], size=(15, 1), justification="center", expand_x= True, key="-LXHL-"),
        sg.Text("PASS", font=["Open Sans",15,"bold"], size=(10, 1), justification="Left", text_color="green", expand_x= True, key="-LXPF-")],
    [sg.Text("Symmetry:", font=["Open Sans",15,"bold"], size=(17, 1), justification="right", expand_x= True),
        sg.Text("(10,10)", font=["Open Sans",15,""], size=(10, 1), justification="center", expand_x= True, key="-SYMMZRD-"),
        sg.Text("(99±9,99±9)", font=["Open Sans",15,""], size=(15, 1), justification="center", expand_x= True, key="-SYMHL-"),
        sg.Text("PASS", font=["Open Sans",15,"bold"], size=(10, 1), justification="Left", text_color="green", expand_x= True, key="-SYMPF-")],
    [sg.Text("Beam Size:", font=["Open Sans",15,"bold"], size=(17, 1), justification="right", expand_x= True),
        sg.Text("(500,600)", font=["Open Sans",15,""], size=(10, 1), justification="center", expand_x= True, key="-SZMZRD-"),
        sg.Text("(999±99,999±99)", font=["Open Sans",15,""], size=(15, 1), justification="center", expand_x= True, key="-SZHL-"),
        sg.Text("PASS", font=["Open Sans",15,"bold"], size=(10, 1), justification="Left", text_color="green", expand_x= True, key="-SZPF-")],
    [sg.Text("Peak Current(Cont.):", font=["Open Sans",15,"bold"], size=(17, 1), justification="right", expand_x= True),
        sg.Text("200mA", font=["Open Sans",15,""], size=(10, 1), justification="center", expand_x= True, key="-PCRNTMZRD-"),
        sg.Text("999±99", font=["Open Sans",15,""], size=(15, 1), justification="center", expand_x= True, key="-PCRNTHL-"),
        sg.Text("PASS", font=["Open Sans",15,"bold"], size=(10, 1), justification="Left", text_color="green", expand_x= True, key="-PCRNTPF-")],
    [sg.Text("Peak Current(OD):", font=["Open Sans",15,"bold"], size=(17, 1), justification="right", expand_x= True),
        sg.Text("200mA", font=["Open Sans",15,""], size=(10, 1), justification="center", expand_x= True, key="-PCRNTOMZRD-"),
        sg.Text("999±99", font=["Open Sans",15,""], size=(15, 1), justification="center", expand_x= True, key="-PCRNTOHL-"),
        sg.Text("PASS", font=["Open Sans",15,"bold"], size=(10, 1), justification="Left", text_color="green", expand_x= True, key="-PCRNTOPF-")],
    [sg.Text("NPN Current:", font=["Open Sans",15,"bold"], size=(17, 1), justification="right", expand_x= True),
        sg.Text("200mA", font=["Open Sans",15,""], size=(10, 1), justification="center", expand_x= True, key="-NPNCRNTMZRD-"),
        sg.Text("999±99", font=["Open Sans",15,""], size=(15, 1), justification="center", expand_x= True, key="-NPNCRNTHL-"),
        sg.Text("PASS", font=["Open Sans",15,"bold"], size=(10, 1), justification="Left", text_color="green", expand_x= True, key="-NPNCRNTPF-")],
    [sg.Text("PNP Current(10v):", font=["Open Sans",15,"bold"], size=(17, 1), justification="right", expand_x= True),
        sg.Text("200mA", font=["Open Sans",15,""], size=(10, 1), justification="center", expand_x= True, key="-PNPHIMZRD-"),
        sg.Text("999±99", font=["Open Sans",15,""], size=(15, 1), justification="center", expand_x= True, key="-PNPHIHL-"),
        sg.Text("PASS", font=["Open Sans",15,"bold"], size=(10, 1), justification="Left", text_color="green", expand_x= True, key="-PNPHIPF-")],
    [sg.Text("PNP Current(5v):", font=["Open Sans",15,"bold"], size=(17, 1), justification="right", expand_x= True),
        sg.Text("200mA", font=["Open Sans",15,""], size=(10, 1), justification="center", expand_x= True, key="-PNPLOMZRD-"),
        sg.Text("999±99", font=["Open Sans",15,""], size=(15, 1), justification="center", expand_x= True, key="-PNPLOHL-"),
        sg.Text("PASS", font=["Open Sans",15,"bold"], size=(10, 1), justification="Left", text_color="green", expand_x= True, key="-PNPLOPF-")],
    [sg.Text("Analog 10v:", font=["Open Sans",15,"bold"], size=(17, 1), justification="right", expand_x= True),
        sg.Text("200mA", font=["Open Sans",15,""], size=(10, 1), justification="center", expand_x= True, key="-AHIMZRD-"),
        sg.Text("999±99", font=["Open Sans",15,""], size=(15, 1), justification="center", expand_x= True, key="-AHIHL-"),
        sg.Text("PASS", font=["Open Sans",15,"bold"], size=(10, 1), justification="Left", text_color="green", expand_x= True, key="-AHIPF-")],
    [sg.Text("Analog 5v:", font=["Open Sans",15,"bold"], size=(17, 1), justification="right", expand_x= True),
        sg.Text("200mA", font=["Open Sans",15,""], size=(10, 1), justification="center", expand_x= True, key="-ALOMZRD-"),
        sg.Text("999±99", font=["Open Sans",15,""], size=(15, 1), justification="center", expand_x= True, key="-ALOHL-"),
        sg.Text("PASS", font=["Open Sans",15,"bold"], size=(10, 1), justification="Left", text_color="green", expand_x= True, key="-ALOPF-")],
]

advanced_column = [
    [sg.Column(report_column, visible=True, key="-REPORT-", expand_x=True, expand_y=True),
        sg.Column(graph_column, visible=False, key="-GRAPHS-", expand_x=True, expand_y=True)]
]

# Define the window layout
layout = [
    [sg.Column(image_column, expand_x=True, expand_y=True),
    sg.Button("R\ne\np\no\nr\nt", font=["Open Sans",10,"bold"], size=(3,7), key="-HIDE-"),
    sg.VSeperator(),
    sg.Column(advanced_column, visible=False, key="-ADVNCED-", expand_x=True, expand_y=True)]
]


# Create the window and show it
window = sg.Window('Smart Vision Lights Beam Analysis', layout, finalize=True, resizable=True, icon=SVLIcon)
window.maximize()
graph1 = window["Graph1"]
graph2 = window["Graph2"]
plt.ioff()
pack_figure(graph1, fig1)
pack_figure(graph2, fig2)
x = 0
y = 0
plot_figure(1, x, y)
plot_figure(2, x, y)
#Initial Image Holder
window["-IMAGE-"].update(data=SVLStack)
date = datetime.datetime.now()
month, day, year = date.month, date.day, date.year

print(month, day, year)

def main():
    ### --- Main Definitions --- ###
    user_list = psutil.users() # Gets all connected users
    user = user_list[0].name # Gets name of current user
    print(user)
    hidden = True
    ReportOrGraph = 0 # 0 = Report, 1 = Graphs
    savePath = 'C:/Users/' + user + '/Documents/SmartLightAnalyzer'
    SLA.connect() # Connect to the electronics measurment tool
    ### --- Main Loop --- ###
    while True:   
        event, values = window.read(timeout=20) # Reads window actions waiting for inputs
        # event is an action... event == "Exit" is Exit Button being pressed
        if event == "Exit" or event == sg.WIN_CLOSED: # Exit Button Pressed or Window Closed
            break
        elif event == "-HIDE-":
            if hidden == True:
                window['-ADVNCED-'].update(visible=True)
                hidden = False
            else:
                window['-ADVNCED-'].update(visible=False)
                hidden = True
        elif event == "-SHWGRPH-":
                window["-REPORT-"].update(visible=False)
                window["-GRAPHS-"].update(visible=True)
        elif event == "-SHWRPRT-":
                window["-GRAPHS-"].update(visible=False)
                window["-REPORT-"].update(visible=True)
        elif event == "-MEASURE-":
            window['-MEASURE-'].update(disabled=True)
            sysTime = datetime.datetime.now()
            dateString = sysTime.strftime("%Y-%m-%d") + '_' + sysTime.strftime("%H%M%S")
            light_string = values["-LIGHT_STRING-"]
            serialNum = values["-SERIAL_NUM-"]
            splitString = light_string.split('-')
            #print(splitString)
            try:
                light = splitString[0]
                mode = splitString[1]
                color = splitString[2]
                invalConfig = False
            except IndexError:
                sg.popup('        Error: Invalid Configuration\n Please Re-Enter Light P/N and S/N.', title="Error: InvalConfgErr", modal=True, icon=SVLIcon, font=["Open Sans",20,'bold'])
                print("lightgistics")
                invalConfig = True
            if invalConfig == False:
                try:
                    lens = splitString[3]
                except IndexError:
                    lens = ''
                try:
                    pol = splitString[3]
                except IndexError:
                    pol = ''

                print(light_string)

                try:
                    frame, horiz, vert, results, passFail = SLA.measure(light_string, cam)
                    data = SLA.loadConfig(light_string)
                    didntRun = False
                except:
                    print("failed")
                    passFail = False
                    didntRun = True

                if didntRun == True:
                    sg.popup('                    Error: Program Error\n Alert Supervisor for Debuging or Try Again.', title="Error: PrgmErr", modal=True, icon=SVLIcon, font=["Open Sans",20,'bold'])
                else:    
                    plot_figure(1, horiz[0], horiz[1])
                    plot_figure(2, vert[0], vert[1])
                    #frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
                    if not os.path.exists(savePath):
                        os.makedirs(savePath)
                        os.makedirs(savePath+'/Images')
                        os.makedirs(savePath+'/Data')

                    # Update Values for Report Tab


                    imgPath = savePath+"/Images/"
                    #print (os.path.join(imgPath, light_string+'_'+serialNum+'_'+dateString+'.jpg'))
                    isWritten = cv2.imwrite(imgPath+light_string+'_'+serialNum+'_'+dateString+'.jpg', frame)

                    if isWritten:
                        print("image saved")
                    else:
                        print("image not saved")

                    imgbytes = cv2.imencode(".png", frame)[1].tobytes()
                    window["-IMAGE-"].update(data=imgbytes)
                    csvPath = savePath + '/Data/' + str(month) + '-' + str(day) + '-' + str(year) + '_Light_Measurements.csv'
                    rowData = [light_string, serial_num]
                    rowData.extend(results)
                    append_list_as_row(csvPath, rowData)
                    flux = results[0]
                    cY = results[1]
                    cX = results[2]
                    xLen = results[3]
                    yLen = results[4]
                    npnCurrent = results[5]
                    pnpCurrent10v = results[6]
                    pnpCurrent5v = results[7]
                    npnStrobe = results[8]
                    pnpStrobe = results[9]

                    if flux < data["intensityHigh"] and flux > data["intensityLow"]:
                        window["-FLXPF-"].update(text="PASS", text_color='green')
                    else:
                        window["-FLXPF-"].update(text="FAIL", text_color='red')
                    flxHLStr = str(data["intensityHigh"]-data["intensityLow"])+"±"+data["intensityLow"]-(data["intensityHigh"]-data["intensityLow"])
                    window["-FLXHL-"].update(text=flxHLStr)

                    yMid = yLen/2
                    xMid = xLen/2
                    symMZRDStr = "("+cX+","+cY+")"
                    window["-SYMMZRD-"].update(text=symMZRDStr)
                    if (cY-yMid) < data["symmetry_gap"] and (cX-xMid) < data["symmetry_gap"]:
                        window["-SYMPF-"].update(text="PASS", text_color='green')
                    else:
                        window["-SYMPF-"].update(text="FAIL", text_color='red')
                    symHLStr = "("+xMid+"±"+data["symmetry_gap"]+","+yMid+"±"+data["symmetry_gap"]+")"
                    window["-SYMHL-"].update(text=symHLStr)

                    if passFail:
                        output = [
                            [sg.Text("", text_color="green", font=["",20,"bold"], justification="center", size=(10, 1))],               
                            [sg.Text("PASS", text_color="green", font=["",50,"bold"], justification="center", size=(10, 1))],
                            [sg.Text(str(rowData))],
                            [sg.OK(size=(10,1), font=["",50,""],p=((15,0),(0,0)))]
                        ]
                        window["-STATUS-"].update(text="PASS", text_color="green")
                    else:
                        output = [
                            [sg.Text("", text_color="green", font=["",20,"bold"], justification="center", size=(10, 1))],               
                            [sg.Text("FAIL", text_color="red", font=["",50,"bold"], justification="center", size=(10, 1))],
                            [sg.Text(str(rowData))],
                            [sg.OK(size=(10,1), font=["",50,""],p=((15,0),(0,0)))]
                        ]
                        window["-STATUS-"].update(text="FAIL", text_color="red")

                    choice, _ = sg.Window('Measurment Data', output, modal=False).read(close=True)
            window['-MEASURE-'].update(disabled=False)
        elif event == "-LIGHT-":
            if values["-LIGHT-"] == 'JWL':
                window["-SIZE-"].update(values=other_size)
            else:
                window["-SIZE-"].update(values=linear_size)

        elif event == "-LIGHT_STRING-":
            light_string = values["-LIGHT_STRING-"]

            if 'SVL' in light_string:
                window["-LIGHT_STRING-"].update(value='')

        elif event == "-SERIAL_NUM-":
            serial_num = values["-SERIAL_NUM-"]

            if 'S' not in serial_num:
                window["-SERIAL_NUM-"].update(value='')       

    window.close()

with Vimba.get_instance() as vimba:
    cams = vimba.get_all_cameras()
    cams[0].set_access_mode(AccessMode.Full)
    with cams[0] as cam:
        cam.load_settings("EOLTestSettings.xml", PersistType.NoLUT)
        main()
